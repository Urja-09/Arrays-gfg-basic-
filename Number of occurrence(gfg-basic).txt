Given a sorted array Arr of size N and a number X, you need to find the number of occurrences of X in Arr.

Example 1:

Input:
N = 7, X = 2
Arr[] = {1, 1, 2, 2, 2, 2, 3}
Output: 4
Explanation: 2 occurs 4 times in the
given array.
Example 2:

Input:
N = 7, X = 4
Arr[] = {1, 1, 2, 2, 2, 2, 3}
Output: 0
Explanation: 4 is not present in the
given array.
Your Task:
You don't need to read input or print anything. Your task is to complete the function count() which takes the array of integers arr, n and x as parameters and returns an integer denoting the answer.

Expected Time Complexity: O(logN)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 10^5
1 ≤ Arr[i] ≤ 10^6
1 ≤ X ≤ 10^6
                                 //CODE
int count(int arr[], int n, int x) {
	    // code here
	                                                         //1.FIRST APPROACH
	   int count = 0;
	for(int i = 0 ; i < n ; i++){
	    if(arr[i]==x)
	    count++;
	}
	return count;
	                                                         //2.SECOND APPROACH
/* take mid if(arr[mid==x) find first index of occurrence of x on left using left pointer and first occurrence ar right side
  using right pointer and perform (right-left+1) else keep incrementing and decrementing left and right pointer according to the value of arr[mid] and x*/
	int left = 0 ; 
	int right = n-1;
	if(n==1){
	if(arr[0]==x)
	return 1;
	else{
	return 0 ;
	}}
	while(left <= right){
	    int mid;
	    mid = (left + right)/2;
	    
	    if(arr[mid]==x)
	    {
	        while(arr[left]!=arr[mid]){
	            left++;
	        }
	        while(arr[right]!=arr[mid]){
	            right--;
	        }
	        return (right-left+1);
	    }
	   else if(x>arr[mid])
	    left=mid+1;
	    else
	    right = mid-1;
	}
	return 0;
	}